//-------------- prelude--------------//
module moduleId 

open util/integer 
open util/sequniv as sequniv 

one sig null {} 

fun fun_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field & type->(type+null)) & type 
}

fun fun_weak_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field) & type 
}

one sig AssertionFailureLit extends java_lang_Throwable {} 
abstract sig boolean {} 
one sig true extends boolean {} 
one sig false extends boolean {} 

abstract sig char {} 

pred TruePred[] {} 
pred FalsePred[] { not TruePred[] } 
pred equ[l,r:univ] {l=r} 
pred neq[l,r:univ] {l!=r} 

fun shl[l,r: Int]: Int { l << r } 
fun sshr[l,r: Int]: Int { l >> r } 
fun ushr[l,r: Int]: Int { l >>> r } 

fun fun_univ_equals[
  l:univ, 
  r: univ 
]: boolean { 
  (equ[l,r]) => true else false 
} 

fun fun_set_add[
  l: set univ,
  e: univ
]: set univ { 
  l+e 
} 

fun fun_set_remove[
  l: set univ,
  e: univ
]: set univ {
  l-e
}
fun fun_set_contains[
  l: set univ,
  e: univ
]: boolean {
  (e in l) => true else false 
} 
pred isSubset[
  l: set univ,
  r: set univ
] {
  (l in r) 
} 
pred isNotSubset[
  l: set univ,
  r: set univ
] {
  (l !in r) 
} 
fun fun_set_size[s: set univ]: Int { #s } 

fun fun_not_empty_set[s: set univ]: boolean { (no s) => false else true } 

fun fun_set_is_empty[s: set univ]: boolean { (no s) => true else false } 

pred pred_empty_set[l: set univ] { (no l) } 

pred pred_set_some[l: set univ] { some l } 

pred pred_set_one[l: set univ] { one l } 

pred pred_set_lone[l: set univ] { lone l } 

pred pred_Object_subset[
  s: set univ
] {
  s in java_lang_Object+null
}

fun fun_set_intersection[
  l: set univ,
  r: set univ
]: set univ {
  l & r 
} 
fun fun_set_difference[
  l: set univ,
  r: set univ
]: set univ {
  l - r 
} 
fun fun_rel_difference[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel - (l->r) 
}
fun fun_rel_add[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel + (l->r) 
}
fun fun_set_sum[
  s: set Int
]: Int {
  sum s 
} 
pred pred_empty_list[l: Int -> univ] { (no l) } 

fun fun_list_add[
  l: Int -> univ,
  e: univ
]: Int -> univ {
  l + (Int[#(l.univ)]->e)
} 

fun fun_list_get[
  l: Int -> univ, 
  index: Int
]: univ { 
  index.l 
} 

fun fun_list_contains[
  l: Int -> univ, 
  e: univ
]: boolean { 
  (e in Int.l) => true else false 
} 

fun fun_list_remove[
  l: Int -> univ, 
  index: Int
]: Int -> univ { 
  prevs[index]<:(l-(index->univ)) + next.(nexts[index]<:(l-(index->univ))) 
} 

fun fun_list_size[s: Int -> univ]: Int { #s } 

fun fun_list_equals[
  s1:Int -> univ, 
  s2: Int -> univ
]: boolean { 
  (s1=s2) => true else false 
} 

fun fun_list_empty[s: Int -> univ]: boolean { (#s = 0) => true else false } 

pred pred_empty_map[map: univ -> univ] { (no map) } 

fun fun_map_put[
  map: univ->univ, 
  k: univ, 
  v: univ
]: univ-> univ { 
  map ++ (k->v) 
}

fun fun_map_contains_key[
  map: univ -> univ, 
  k: univ
]: boolean { 
  (some k.map) => true else false 
}

fun fun_map_remove[
  map: univ -> univ, 
  k: univ
]: univ->univ {
  map - (k->univ) 
} 

fun fun_map_get[
  map: univ -> univ, 
  k: univ
]: univ { 
  (some k.map) => k.map else null 
} 

fun fun_map_is_empty[
  map: univ -> univ, 
]: boolean { 
  (some map) => false else true 
}

fun fun_map_clear[
  mapEntries1: univ -> univ -> univ, 
  map: univ
]: univ -> univ -> univ { 
  mapEntries1 - (map -> univ -> univ)
}

fun fun_map_size[
  map: univ -> univ, 
]: univ {
  #map 
} 

pred isEmptyOrNull[u: univ] { u in null } 
fun fun_closure[
  rel: univ -> univ 
]: univ -> univ {
  ^rel 
} 

fun fun_reflexive_closure[
  rel: univ -> univ 
]: univ -> univ {
  *rel 
} 

fun fun_transpose[
  rel: univ -> univ 
]: univ -> univ {
  ~rel 
} 

pred liftExpression[
  expr: univ 
] {
  expr=true 
} 

fun rel_override[
  r:univ->univ,
  k:univ, 
  v:univ
]: univ->univ { 
  r - (k->univ) + (k->v) 
} 

fun Not[a: boolean]: boolean {
    (a=true) => false else true 
}
fun Or[a: boolean, b: boolean]: boolean {
    (a=true or b=true) => true else false
}
fun And[a: boolean, b: boolean]: boolean {
    (a=true and b=true) => true else false
}
fun Xor[a: boolean, b: boolean]: boolean {
    ((a==true and b==false) or (a==false and b==true)) => true else false
}
fun AdderCarry[a: boolean, b: boolean, cin: boolean]: boolean {
    Or[ And[a,b], And[cin, Xor[a,b]]] 
}
fun AdderSum[a: boolean, b: boolean, cin: boolean]: boolean {
    Xor[Xor[a, b], cin]
}
pred updateFieldPost[
  f1:univ->univ,
  f0:univ->univ,
  l:univ,
  r:univ
]{ 
  (r=none) => f1=f0-(l->univ) else f1 = f0 ++ (l->r) 
} 

pred havocVarPost[u:univ]{} 
pred havocVariable2Post[u:univ->univ]{}
action havocVariable2[u:univ->univ]{
 pre{TruePred[]}
 post{havocVariable2Post[u']}
}

pred havocVariable3Post[u:univ->(seq univ)]{}
action havocVariable3[u:univ->(seq univ)]{
 pre{TruePred[]}
 post{havocVariable3Post[u']}
}

pred havocFieldPost[f0,f1: univ->univ, u:univ]{ 
  u<:f0 = u<:f1 
  some u.f1  
} 

pred havocFieldContentsPost[target: univ, 
                            field_0: univ -> univ, 
                            field_1: univ -> univ] { 
  field_1 - (target->univ) = field_0 - (target->univ) 
}

action havocFieldContents[target: univ, 
                          field: univ->univ] {
  pre  { TruePred[] }
  post { havocFieldContentsPost[target,field,field'] }
}

pred havocListSeqPost[target: univ,
                            field_0: univ -> Int -> univ, 
                            field_1: univ -> Int -> univ] { 
  field_1 - (target->Int->univ) = field_0 - (target->Int->univ) 
}

action havocListSeq[target: univ,
                          field: univ->Int->univ] {
  pre  { TruePred[] }
  post { havocListSeqPost[target,field,field'] }
}

pred pred_in[n: univ, t: set univ] { n in t } 

pred instanceOf[n: univ, t: set univ] { n in t } 

pred isCasteableTo[n: univ, t: set univ] { (n in t) or (n = null) } 

pred getUnusedObjectPost[
  usedObjects1:set java_lang_Object, 
  usedObjects0:set java_lang_Object,
  n1: java_lang_Object+null
]{ 
  n1 !in usedObjects0 
  usedObjects1 = usedObjects0 + (n1)
} 

action updateField[
  l:univ,
  f:univ->univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   updateFieldPost[f',
                  f,
                  l,
                  r]
}
}

action getUnusedObject[
  n:java_lang_Object+null,
  usedObjects:set java_lang_Object
]{
pre {
   TruePred[]
}
post {
   getUnusedObjectPost[usedObjects',
                      usedObjects,
                      n']
}
}

action havocField[
  f:univ->univ,
  u:univ
]{
pre {
   TruePred[]
}
post {
   havocFieldPost[f,
                 f',
                 u]
}
}

action updateVariable[
  l:univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   equ[l',
      r]
}
}

action havocVariable[
  v:univ
]{
pre {
   TruePred[]
}
post {
   havocVarPost[v']
}
}

//-------------- ClassFields--------------//
one sig ClassFields {}
{}




//-------------- java_lang_Throwable--------------//
abstract sig java_lang_Throwable extends java_lang_Object {}
{}



one sig java_lang_ThrowableLit extends java_lang_Throwable {}
{}

//-------------- testing_examples_ejemplo--------------//
sig testing_examples_ejemplo extends java_lang_Object {}
{}




pred testing_examples_ejemploCondition2[
]{
   isEmptyOrNull[ClassFields]

}

pred testing_examples_ejemploCondition3[
]{
   not (
     isEmptyOrNull[ClassFields])

}

pred testing_examples_ejemplo_requires[
  testing_examples_ejemplo_canarywololoInta:univ->univ,
  testing_examples_ejemplo_canarywololoIntc:univ->univ,
  testing_examples_ejemplo_canarywololoIntd:univ->univ
]{
   equ[ClassFields.testing_examples_ejemplo_canarywololoInta,
      false]
   and 
   equ[ClassFields.testing_examples_ejemplo_canarywololoIntc,
      false]
   and 
   equ[ClassFields.testing_examples_ejemplo_canarywololoIntd,
      false]

}

pred postcondition_testing_examples_ejemplo_wololoInt_0[
  testing_examples_ejemplo_canarywololoInta':univ->univ,
  testing_examples_ejemplo_canarywololoIntc':univ->univ,
  testing_examples_ejemplo_canarywololoIntd':univ->univ,
  throw':univ
]{
   testing_examples_ejemplo_ensures[testing_examples_ejemplo_canarywololoInta',
                                   testing_examples_ejemplo_canarywololoIntc',
                                   testing_examples_ejemplo_canarywololoIntd',
                                   throw']
   and 
   (
     not (
       throw'=AssertionFailureLit)
   )

}

pred testing_examples_ejemploCondition0[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred testing_examples_ejemploCondition1[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred precondition_testing_examples_ejemplo_wololoInt_0[
  testing_examples_ejemplo_canarywololoInta:univ->univ,
  testing_examples_ejemplo_canarywololoIntc:univ->univ,
  testing_examples_ejemplo_canarywololoIntd:univ->univ,
  throw:univ
]{
   equ[throw,
      null]
   and 
   testing_examples_ejemplo_requires[testing_examples_ejemplo_canarywololoInta,
                                    testing_examples_ejemplo_canarywololoIntc,
                                    testing_examples_ejemplo_canarywololoIntd]

}

pred testing_examples_ejemploCondition5[
  t_8:univ
]{
   not (
     t_8=true)

}

pred testing_examples_ejemploCondition4[
  t_8:univ
]{
   t_8=true

}

pred testing_examples_ejemplo_ensures[
  testing_examples_ejemplo_canarywololoInta':univ->univ,
  testing_examples_ejemplo_canarywololoIntc':univ->univ,
  testing_examples_ejemplo_canarywololoIntd':univ->univ,
  throw':univ
]{
   (
     throw'=null)
   implies 
           (
             equ[ClassFields.testing_examples_ejemplo_canarywololoInta',
                false]
             and 
             equ[ClassFields.testing_examples_ejemplo_canarywololoIntc',
                false]
             and 
             equ[ClassFields.testing_examples_ejemplo_canarywololoIntd',
                false]
           )

}

program testing_examples_ejemplo_wololoInt_0[
  throw:java_lang_Throwable+null,
  return:Int,
  testing_examples_ejemplo_canarywololoInta:(ClassFields)->one(boolean),
  testing_examples_ejemplo2_canarywololoIntas:(ClassFields)->one(boolean),
  testing_examples_ejemplo_canarywololoIntd:(ClassFields)->one(boolean),
  testing_examples_ejemplo2_canarywololoIntbs:(ClassFields)->one(boolean),
  testing_examples_ejemplo_canarywololoIntc:(ClassFields)->one(boolean),
  usedObjects:set (java_lang_Object)
] var [
  var_9_c:Int,
  var_8_a:Int,
  exit_stmt_reached:boolean,
  var_10_d:Int,
  t_8:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   skip;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      var_8_a:=1
   
   } else {
      skip
   
   }
   ;
   skip;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      var_9_c:=1
   
   } else {
      skip
   
   }
   ;
   skip;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      var_10_d:=0
   
   } else {
      skip
   
   }
   ;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      t_8:=(equ[var_9_c,0]=>(true)else(false))
   
   } else {
      skip
   
   }
   ;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      if testing_examples_ejemploCondition4[t_8]  {
         if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
            if testing_examples_ejemploCondition2[]  {
               throw:=java_lang_NullPointerExceptionLit
            
            } else {
               testing_examples_ejemplo_canarywololoIntc:=(testing_examples_ejemplo_canarywololoIntc)++((ClassFields)->(true))
            
            }
         
         } else {
            skip
         
         }
      
      } else {
         if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
            var_8_a:=div[var_8_a,var_9_c]
         
         } else {
            skip
         
         }
      
      }
   
   } else {
      skip
   
   }
   ;
   if testing_examples_ejemploCondition0[exit_stmt_reached,throw]  {
      return:=1;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

assertCorrectness check_testing_examples_ejemplo_wololoInt_0[
  exit_stmt_reached:boolean,
  return:Int,
  t_8:boolean,
  testing_examples_ejemplo2_canarywololoIntas:(ClassFields)->one(boolean),
  testing_examples_ejemplo2_canarywololoIntbs:(ClassFields)->one(boolean),
  testing_examples_ejemplo_canarywololoInta:(ClassFields)->one(boolean),
  testing_examples_ejemplo_canarywololoIntc:(ClassFields)->one(boolean),
  testing_examples_ejemplo_canarywololoIntd:(ClassFields)->one(boolean),
  throw:java_lang_Throwable+null,
  usedObjects:set (java_lang_Object),
  var_10_d:Int,
  var_8_a:Int,
  var_9_c:Int
]{
pre={
   precondition_testing_examples_ejemplo_wololoInt_0[testing_examples_ejemplo_canarywololoInta,
                                                    testing_examples_ejemplo_canarywololoIntc,
                                                    testing_examples_ejemplo_canarywololoIntd,
                                                    throw]

}
program={
   call testing_examples_ejemplo_wololoInt_0[throw,return,testing_examples_ejemplo_canarywololoInta,testing_examples_ejemplo2_canarywololoIntas,testing_examples_ejemplo_canarywololoIntd,testing_examples_ejemplo2_canarywololoIntbs,testing_examples_ejemplo_canarywololoIntc,usedObjects]

}
post={
   postcondition_testing_examples_ejemplo_wololoInt_0[testing_examples_ejemplo_canarywololoInta',
                                                     testing_examples_ejemplo_canarywololoIntc',
                                                     testing_examples_ejemplo_canarywololoIntd',
                                                     throw']

}
}

//-------------- java_lang_RuntimeException--------------//
abstract sig java_lang_RuntimeException extends java_lang_Exception {}
{}



one sig java_lang_RuntimeExceptionLit extends java_lang_RuntimeException {}
{}

//-------------- java_lang_Object--------------//
abstract sig java_lang_Object {}
{}




//-------------- java_lang_Exception--------------//
abstract sig java_lang_Exception extends java_lang_Throwable {}
{}



one sig java_lang_ExceptionLit extends java_lang_Exception {}
{}

//-------------- java_lang_NullPointerException--------------//
abstract one sig java_lang_NullPointerException extends java_lang_RuntimeException {}
{}



one sig java_lang_NullPointerExceptionLit extends java_lang_NullPointerException {}
{}

